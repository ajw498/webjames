
+----------------------------------------------------------------------+
| PHP HTML Embedded Scripting Language Version 3.0                     |
+----------------------------------------------------------------------+
| Copyright (c) 1997-2000 PHP Development Team (See Credits file)      |
+----------------------------------------------------------------------+
| This program is free software; you can redistribute it and/or modify |
| it under the terms of one of the following licenses:                 |
|                                                                      |
|  A) the GNU General Public License as published by the Free Software |
|     Foundation; either version 2 of the License, or (at your option) |
|     any later version.                                               |
|                                                                      |
|  B) the PHP License as published by the PHP Development Team and     |
|     included in the distribution in the file: LICENSE                |
|                                                                      |
| This program is distributed in the hope that it will be useful,      |
| but WITHOUT ANY WARRANTY; without even the implied warranty of       |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
| GNU General Public License for more details.                         |
|                                                                      |
| You should have received a copy of both licenses referred to here.   |
| If you did not, or have any questions about PHP licensing, please    |
| contact core@php.net.                                                |
+----------------------------------------------------------------------+

                           RISC OS PHP 3.0.14
                           ~~~~~~~~~~~~~~~~~~
What is it?
~~~~~~~~~~~
PHP, which stands for "PHP: Hypertext Preprocessor", is an HTML-embedded
scripting language.  Much of its syntax is borrowed from C, Java and
Perl with a couple of unique PHP-specific features thrown in.  The goal
of the language is to allow web developers to write dynamically
generated pages quickly.
The scripts are interpreted by the server, so it works with all browsers.

As a simple example:

<HTML>
<HEAD>
<TITLE>PHP Example</TITLE>
</HEAD>
<BODY>
This is standard <B>HTML</B>

<? echo("This is PHP"); ?>

</BODY>
</HTML>

The bits between <? and ?> are PHP code, the rest is normal HTML. In
this trivial example all the PHP does is to add the text This is PHP to
the HTML file. PHP is as powerful as a custom CGI script, but simpler to
use.

I have tried to make the minimum of changes whilst porting PHP, so it
should behave very similar to any other platform.  Thus a script written
in RISC OS should behave the same when uploaded to a Unix web server, or
vice versa.


Documentation
~~~~~~~~~~~~~
This file only deals with RISC OS specific issues, for general
information about PHP you should look at the PHP manual, or
http://www.php.net/
There is a simple introduction and links to other tutorials at
http://www.php.net/tut.php3
The PHP manual is available is several formats from
http://www.php.net/manual/, and also in HTML and StrongHelp formats from
http://www.ecs.soton.ac.uk/~ajw498/ (Please note that the formatting of
the StrongHelp manual is not particularly good in places, as it was
automatically converted from the HTML, but it is useful to be able to
search for a particular function easily.)


Using PHP
~~~~~~~~~
Ensure that the !PHP application has been seen before you try to run any
PHP scripts. You will also need a web browser to view the output. Double
click on !PHP, then select the Stand alone icon, then click on Save.
Enter your script in a text editor such as !StrongEd, !Zap or !Edit, and
then save it. Set it's filetype to PHP. Double click on it, and it will
be interpreted, and the output loaded into your browser.


Using PHP with a web server
~~~~~~~~~~~~~~~~~~~~~~~~~~~
I have tested PHP with the Navaho server suite (2.00b24)
http://www.navaho.co.uk/support/ and Netplex (0.22)
http://www.tristone.co.uk/davespace/netplexpublic/index.html
Other servers may work, or may need the wrapper to be altered (see below).
Double click on !PHP, then select the Run as a CGI program icon, then
click on Save.

To use with Navaho, simply create you script as above, make sure that
it's filetype is PHP, then put the script into Navaho's cgi-bin
directory.

To use with Netplex, it is slightly more complicated, as Netplex will
only run certain filetypes as CGI programs, therefore put your PHP
script in Netplex's cgi-bin directory, with a name of (for example)
Splodge. Then create an Obey file in the same directory, called (for
example) Squiggle. The obey file should contain the line
Run <Obey$Dir>.Splodge
Then in your browser, entering
http://www.your.domain.com/cgi-bin/squiggle will run the PHP script.

Errors
~~
If you get the following error then it is usually because you are
running PHP from a web server, but have not selected the web server icon
in !PHP.

X-Powered-By: PHP/3.0.14 Content-type: text/html
Fatal error: Unable to open -f in - on line 0
No input file specified.

If you get the output scrolling in a command window, then you are
trying to run PHP standalone, but have not selected the stand alone icon
in !PHP

Filenames
~~~~~~~~~
PHP uses UnixLib, and therefore takes advantage of it's filename
translation capabilities. Thus you may refer to files from your scripts
or the command line in RISC OS format or Unix format. I would suggest
using Unix format filenames in your scripts, so that they are more
portable. Note that if you use RISC OS filenames, they should be full
pathnames (such as ADFS::4.$.File or <PHP$Dir>.File) otherwise they may
be interpreted as Unix filenames. Under Unix, all PHP scripts should
have the filename extension php3, but this is not necessary for RISC OS,
although doing so might help portability.


Memory
~~~~~~
PHP needs about a megabyte of free memory to run a simple script, and
complex scripts will need more. By default PHP is set up to use dynamic
areas. If you don't want it to, or you have RISC OS 3.11 or earlier, you
can disable their use by editing the !PHP.!Boot file.


CGIWrapper
~~~~~~~~~~
The file !PHP.CGIWrapper exists to isolate the actual PHP binary from
the variations between web servers. If you find PHP does not work
correctly with another server, then this is the place to have a look at.
It is a BASIC file, and most of it should be reasonably easy to
understand. If you do modify this file, I would be grateful if you
could send me a copy, so everyone can benefit from it.


Configuration
~~~~~~~~~~~~~
Whether to run as a CGI program or not can be configured by double
clicking on !PHP. There are some other options that can be configured,
although the defaults should be fine for most people. To configure the
other options, copy the file php3/ini into your !Boot.Choices directory,
and then load it into a text editor and make any alterations. Many of
the options are not relevant to the RISC OS port. More information on
the options can be found in the PHP manual. You may find changing the
error_reporting variable to 15 helps with debugging.


StrongEd
~~~~~~~~
I have included a basic PHP modefile for StrongEd, which you may find useful.


Known Problems
~~~~~~~~~~~~~~
There are many functions in PHP, and I am not able to test every single
one of them, so if you come across something that doesn't work, please
let me know.

Symbolic and hard links won't work as RISC OS doesn't support them.
The uniqid function may give the same value if called twice in close
succession.
Not all of the dbm functions work correctly.



Any updates to the RISC OS port should be available from
http://www.ecs.soton.ac.uk/~ajw498/

General information about PHP can be found at http://www.php.net/

If people find PHP useful, then let me know, then I might be persuaded
to port PHP 4 when it comes out of beta testing.


4/2/00

Alex Waugh   mailto:ajw498@ecs.soton.ac.uk

