
                    PHP 4.0.2  RISC OS version 2.02
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What is it?
~~~~~~~~~~~
PHP, which stands for "PHP: Hypertext Preprocessor", is an HTML-embedded
scripting language.  Much of its syntax is borrowed from C, Java and
Perl with a couple of unique PHP-specific features thrown in.  The goal
of the language is to allow web developers to write dynamically
generated pages quickly.
The scripts are interpreted by the server, so it works with all browsers.

As a simple example:

<HTML>
<HEAD>
<TITLE>PHP Example</TITLE>
</HEAD>
<BODY>
This is standard <B>HTML</B>

<? echo("This is PHP"); ?>

</BODY>
</HTML>

The bits between <? and ?> are PHP code, the rest is normal HTML. In
this trivial example all the PHP does is to add the text This is PHP to
the HTML file. PHP is as powerful as a custom CGI script, but simpler to
use.

I have tried to make the minimum of changes whilst porting PHP, so it
should behave very similar to any other platform.  Thus a script written
in RISC OS should behave the same when uploaded to a Unix web server, or
vice versa.


Documentation
~~~~~~~~~~~~~
This file only deals with RISC OS specific issues, for general
information about PHP you should look at the PHP manual, or
http://www.php.net/
There is a simple introduction and links to other tutorials at
http://www.php.net/tut.php3
The PHP manual is available is several formats from
http://www.php.net/manual/, and also in HTML and StrongHelp formats from
http://www.ecs.soton.ac.uk/~ajw498/ (Please note that the formatting of
the StrongHelp manual is not particularly good in places, as it was
automatically converted from the HTML, but it is useful to be able to
search for a particular function easily.)


Using PHP
~~~~~~~~~
Ensure that the !PHP application has been seen before you try to run any
PHP scripts. You will also need a web browser to view the output. Double
click on !PHP, then select the Stand alone icon, then click on Save.
Enter your script in a text editor such as !StrongEd, !Zap or !Edit, and
then save it. Set it's filetype to PHP. Double click on it, and it will
be interpreted, and the output loaded into your browser.

If you want PHP to multi-task when interpreting your scripts, then tick
the Run in a task window icon.

While quite a few scripts will work like this, ones that use GET and
POST variables from forms, generate GIF images and so forth will only
work correctly when running under a web server.


Using PHP with a web server
~~~~~~~~~~~~~~~~~~~~~~~~~~~

I have succesfully tested PHP with the following servers
Navaho server suite (2.00b24) http://www.navaho.co.uk/support/
Netplex (0.22 and 1.70) http://www.warmsilence.demon.co.uk/products.html#Netplex
ANT server suite 1.32 http://www.argonet.co.uk/ant/
WebJames (0.24 and later) http://www.ecs.soton.ac.uk/~ajw498/internet/

PHP does not work with DeltaNet or WebServe

Other servers may work, or may need the CGIWrapper to be altered (see
below).
Double click on !PHP, then select the Run as a CGI program icon, then
click on Save.

To use with Navaho, simply create your script as above, make sure that
it's filetype is PHP, then put the script into Navaho's cgi-bin
directory.

If you use WebJames then put your script into the cgi-bin2 directory, or,
if you have version 0.25 then adding the following to your
attributes file will allow you to put PHP scripts in any directory
    # global atttributes
    [/]
    is-cgi
    cgi-api=redirect
    allowed-filetypes=18a

Versions 0.26 and later have this set up by default.

To use with the unregistered version of Netplex, or the ANT server, it
is slightly more complicated, as they will only run certain filetypes as
CGI programs, therefore put your PHP script in the cgi-bin directory,
with a name of (for example) Splodge. Then create an Obey file in the same
directory, called (for example) Squiggle. The obey file should contain the
line
Run <Obey$Dir>.Splodge
Then in your browser, entering
http://www.your.domain.com/cgi-bin/squiggle will run the PHP script.

For registered versions of Netplex (1.62 or later) you can either
use the above method, or you can open the !Netplex.Resources.UK.Messages
file and change the line PerlFiletype:&102 to PerlFiletype:&18A (This
will mean that you can't run Perl scripts though). Thanks to Nik Gare
for pointing this out.

The commercial version of Netplex (2.0x) shouldn't need either of the
above modifications, but I don't have a copy so haven't tested this.

Errors
~~~~~~
If you get the following error then it is usually because you are
running PHP from a web server, but have not selected the web server icon
in !PHP.

X-Powered-By: PHP/X.X.XX Content-type: text/html
Fatal error: Unable to open -f in - on line 0
No input file specified.

If you get the output scrolling in a command window, then you are
trying to run PHP standalone, but have not selected the stand alone icon
in !PHP

Filenames
~~~~~~~~~
PHP uses UnixLib, and therefore takes advantage of it's filename
translation capabilities. Thus you may refer to files from your scripts
or the command line in RISC OS format or Unix format. I would suggest
using Unix format filenames in your scripts, so that they are more
portable. Note that if you use RISC OS filenames, they should be full
pathnames (such as ADFS::4.$.File or <PHP$Dir>.File) otherwise they may
be interpreted as Unix filenames. Under Unix, all PHP scripts should
have the filename extension php, but this is not necessary for RISC OS,
although doing so might help portability.
Due to limitations in UnixLib, there are certain situations where a file
cannot be found even though it exists, eg index/php when there is also
a directory called index. In general, try to avoid using directory names
that match any of your filenames (either the part before the extension,
or the extension itself).
If you get the error "Primary script not found" then this may well be
the problem.


Memory
~~~~~~
PHP needs around 1.6Mb of free memory to run a simple script, and
complex scripts will need more. By default PHP is set up to use dynamic
areas. If you don't want it to, or you have RISC OS 3.11 or earlier, you
can disable their use by editing the !PHP.!Boot file.


CGIWrapper
~~~~~~~~~~
The file !PHP.CGIWrapper exists to isolate the actual PHP binary from
the variations between web servers. If you find PHP does not work
correctly with another server, then this is the place to have a look at.
It is a BASIC file, and most of it should be reasonably easy to
understand. If you do modify this file, I would be grateful if you
could send me a copy, so everyone can benefit from it.


Configuration
~~~~~~~~~~~~~
Whether to run as a CGI program or not can be configured by double
clicking on !PHP. There are some other options that can be configured,
although the defaults should be fine for most people. To configure the
other options, copy the file php/ini into your !Boot.Choices directory,
and then load it into a text editor and make any alterations. Many of
the options are not relevant to the RISC OS port. More information on
the options can be found in the PHP manual. You may find changing the
error_reporting variable to 15 helps with debugging.


StrongEd
~~~~~~~~
I have included a basic PHP modefile for StrongEd, which you may find useful.


Extension modules
~~~~~~~~~~~~~~~~~
The following extensions have been included with PHP:
standard  Various common functions
pcre      Perl compatible regular expressions
calendar  Date related functions
ftp       FTP client
gd        Create/manipulate GIF images
sockets   Functions for using sockets
session   Tracking site visitors
zlib      Compression functions

If there are other extensions that you would like added then let me know
and I will take a look at them.


Problems
~~~~~~~~
There are many functions in PHP, and I am not able to test every single
one of them, so if you come across something that doesn't work, please
let me know.

Some functions will not work as they do not have any meaning under RISC OS,
eg. Symbolic links and file ownership.

Any updates to the RISC OS port should be available from
http://www.ecs.soton.ac.uk/~ajw498/

General information about PHP can be found at http://www.php.net/



Alex Waugh   mailto:ajw498@ecs.soton.ac.uk

